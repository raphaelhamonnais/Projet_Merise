

DROP DATABASE IF EXISTS PROJET_MERISE;
CREATE DATABASE PROJET_MERISE;
USE PROJET_MERISE;






DROP TABLE IF EXISTS PROMOTION;
CREATE TABLE PROMOTION (
	ID_Promotion INT AUTO_INCREMENT,
	Nom_Promotion VARCHAR(30),
	Annee_Promotion YEAR,
	CONSTRAINT PK_PROMOTION PRIMARY KEY (ID_Promotion)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS GROUPE;
CREATE TABLE GROUPE (
	ID_Groupe INT AUTO_INCREMENT,
	ID_Promotion INT,
	Nom_Groupe VARCHAR(30),
	Commentaire_Groupe 	TEXT, -- pas besoin de préciser la taille, utile pour mettre au choix un commentaire court ou long
	CONSTRAINT PK_GROUPE PRIMARY KEY (ID_Groupe),
	CONSTRAINT FK_GROUPE_PROMOTION FOREIGN KEY (ID_Promotion) REFERENCES PROMOTION(ID_Promotion)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS UTILISATEUR;
CREATE TABLE UTILISATEUR (
	ID_Utilisateur INT AUTO_INCREMENT,
	login VARCHAR(30),
	Nom_Utilisateur VARCHAR(30),
	Prenom_Utilisateur VARCHAR(30),
	Mail_Utilisateur VARCHAR(50),
	CONSTRAINT PK_UTILISATEUR PRIMARY KEY (ID_Utilisateur),
	CONSTRAINT UK_UTILISATEUR UNIQUE(login)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS ELEVE;
CREATE TABLE ELEVE (
	ID_Utilisateur INT,
	ID_Groupe INT,
	CONSTRAINT PK_ELEVE PRIMARY KEY (ID_Utilisateur), 
	CONSTRAINT FK_ELEVE_UTILISATEUR FOREIGN KEY (ID_Utilisateur) REFERENCES UTILISATEUR(ID_Utilisateur), 	-- relation généralisation spécialisation
	CONSTRAINT FK_ELEVE_GROUPE FOREIGN KEY (ID_Groupe) REFERENCES GROUPE(ID_Groupe) 
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS PROFESSEUR;
CREATE TABLE PROFESSEUR (
	ID_Utilisateur INT,
	CONSTRAINT PK_PROFESSEUR PRIMARY KEY (ID_Utilisateur),
	CONSTRAINT FK_PROFESSEUR_UTILISATEUR FOREIGN KEY (ID_Utilisateur) REFERENCES UTILISATEUR(ID_Utilisateur)	-- relation généralisation spécialisation 
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS ADMINISTRATEUR;
CREATE TABLE ADMINISTRATEUR (
	ID_Utilisateur INT,
	CONSTRAINT PK_ADMINISTRATEUR PRIMARY KEY (ID_Utilisateur),
	CONSTRAINT FK_PADMINISTRATEUR_UTILISATEUR FOREIGN KEY (ID_Utilisateur) REFERENCES UTILISATEUR(ID_Utilisateur)	-- relation généralisation spécialisation 
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS PROF_GERE_GROUPE;
CREATE TABLE PROF_GERE_GROUPE (
	ID_Utilisateur INT,
	ID_Groupe INT,
	CONSTRAINT PK_PROFESSEUR PRIMARY KEY (ID_Utilisateur, ID_Groupe), -- pour eviter la redondance de données avec deux fois le prof 1 gérant le groupe 1 par exemple
	CONSTRAINT FK_PROF_GERE_GROUPE___PROFESSEUR FOREIGN KEY (ID_Utilisateur) REFERENCES PROFESSEUR(ID_Utilisateur),
	CONSTRAINT FK_PROF_GERE_GROUPE___GROUPE FOREIGN KEY (ID_Groupe) REFERENCES GROUPE(ID_Groupe)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS TYPE_EXERCICE;
CREATE TABLE TYPE_EXERCICE (
	ID_Type_Exercice INT AUTO_INCREMENT,
	Commentaire_Type_Exercice TEXT,
	CONSTRAINT PK_TYPE_EXERCICE PRIMARY KEY (ID_Type_Exercice)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS DD;  
CREATE TABLE DD (
	ID_DD INT AUTO_INCREMENT,
	CONSTRAINT PK_DD PRIMARY KEY (ID_DD)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;




DROP TABLE IF EXISTS MEA;
CREATE TABLE MEA (
	ID_MEA INT AUTO_INCREMENT,
	CONSTRAINT PK_MEA PRIMARY KEY (ID_MEA)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS EXERCICE;
CREATE TABLE EXERCICE (
	ID_Exercice INT AUTO_INCREMENT,
	Nom_Exercice VARCHAR(100), -- suffisant pour le nom d'un exercice
	Enonce_Exercice VARCHAR(100), -- chemin d'accès au fichier texte, pdf, ... contenant l'énoncé
	ID_Type_Exercice INT,
	ID_MEA_Correction INT,
	ID_MEA_Fake INT,
	ID_DD_Correction INT,
	ID_DD_Fake INT,
	Correction_Prete BOOLEAN DEFAULT FALSE,
	Fake_Pret BOOLEAN DEFAULT FALSE,
	Exercice_Pret BOOLEAN DEFAULT FALSE,
	CONSTRAINT PK_EXERCICE PRIMARY KEY (ID_Exercice),
	CONSTRAINT UNIQUE_EXERCICE UNIQUE(Nom_Exercice, ID_Type_Exercice),
	CONSTRAINT FK_EXERCICE___TYPE_EXERCICE FOREIGN KEY (ID_Type_Exercice) REFERENCES TYPE_EXERCICE(ID_Type_Exercice),
	CONSTRAINT FK_EXERCICE___MEA_CORR FOREIGN KEY (ID_MEA_Correction) REFERENCES MEA(ID_MEA),
	CONSTRAINT FK_EXERCICE___MEA_FAKE FOREIGN KEY (ID_MEA_Fake) REFERENCES MEA(ID_MEA),
	CONSTRAINT FK_EXERCICE___DD_CORR FOREIGN KEY (ID_DD_Correction) REFERENCES DD(ID_DD),
	CONSTRAINT FK_EXERCICE___DD_FAKE FOREIGN KEY (ID_DD_Fake) REFERENCES DD(ID_DD)	
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS COPIE_ELEVE;
CREATE TABLE COPIE_ELEVE (
	ID_Copie_Eleve INT AUTO_INCREMENT, -- L'ID_Copie_Eleve permet de l'identifier de manière unique en auto_increment : permet d'avoir plusieurs lignes avec le même ID_Utilisateur (eleve) et le même ID_Exercice, permettant à un Eleve de faire plusieurs fois le même exercice
	Nom_Copie_Eleve VARCHAR(50), -- Permet à l'élève de donner un nom à sa copie pour s'y retrouver plus tard dans sa liste par exemple
	ID_Exercice INT,
	ID_Utilisateur INT,
	ID_MEA INT,
	ID_DD INT,
	Date_Derniere_Modif_Copie_Eleve DATE,
	Date_Envoi_Copie_Eleve DATE DEFAULT NULL,
	Commentaire_Copie_Eleve TEXT, -- l'élève peut prendre des notes sur sa copie, ...
	Note_Copie_Eleve REAL DEFAULT NULL,  -- se remplit lorsque la copie est corrigée 
	CONSTRAINT PK_COPIE_ELEVE PRIMARY KEY (ID_Copie_Eleve),
	CONSTRAINT FK_COPIE_ELEVE___ELEVE FOREIGN KEY (ID_Utilisateur) REFERENCES ELEVE(ID_Utilisateur),
	CONSTRAINT FK_COPIE_ELEVE___EXERCICE FOREIGN KEY (ID_Exercice) REFERENCES EXERCICE(ID_Exercice),
	CONSTRAINT FK_COPIE_ELEVE___MEA FOREIGN KEY (ID_MEA) REFERENCES MEA(ID_MEA),
	CONSTRAINT FK_COPIE_ELEVE___DD FOREIGN KEY (ID_DD) REFERENCES DD(ID_DD)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS EDITION_EXERCICE;
CREATE TABLE EDITION_EXERCICE (
	ID_Edition_Exercice INT AUTO_INCREMENT,									
	ID_Utilisateur INT,
	ID_Exercice INT,
	Date_Edition_Exercice DATE,
	CONSTRAINT PK_EDITION_EXERCICE PRIMARY KEY (ID_Edition_Exercice),
	CONSTRAINT FK_EDITION_EXERCICE___PROFESSEUR FOREIGN KEY (ID_Utilisateur) REFERENCES PROFESSEUR(ID_Utilisateur),
	CONSTRAINT FK_EDITION_EXERCICE___EXERCICE FOREIGN KEY (ID_Exercice) REFERENCES EXERCICE(ID_Exercice)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;






DROP TABLE IF EXISTS TYPE_DONNEE;
CREATE TABLE TYPE_DONNEE (
	ID_Type_Donnee INT,
	Libelle_Type_Donnee VARCHAR(10),
	CONSTRAINT PK_TYPE_DONNE PRIMARY KEY (ID_Type_Donnee)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS RUBRIQUE;
CREATE TABLE RUBRIQUE (
	ID_DD INT,
	Nom_Rubrique VARCHAR(50), -- 50 car certains noms peuvent être longs
	Commentaire_Rubrique VARCHAR(100),
	CONSTRAINT PK_RUBRIQUE PRIMARY KEY (ID_DD, Nom_Rubrique),
	CONSTRAINT FK_RUBRIQUE_DD FOREIGN KEY (ID_DD) REFERENCES DD(ID_DD)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;



DROP TABLE IF EXISTS CALCULEE;
CREATE TABLE CALCULEE (
	ID_DD INT,
	Nom_Calculee VARCHAR(50),
	ID_Type_Donnee INT,
	CONSTRAINT PK_CALCULEE PRIMARY KEY (ID_DD, Nom_Calculee),
	CONSTRAINT FK_CALCULEE_RUBRIQUE FOREIGN KEY (ID_DD, Nom_Calculee) REFERENCES RUBRIQUE(ID_DD, Nom_Rubrique),
	CONSTRAINT FK_CALCULEE___TYPE_DONNE FOREIGN KEY (ID_Type_Donnee) REFERENCES TYPE_DONNEE(ID_Type_Donnee)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;





DROP TABLE IF EXISTS CALCULEE_A_PARTIR_DE;
CREATE TABLE CALCULEE_A_PARTIR_DE (
	ID_DD INT,
	Nom_Calculee VARCHAR(50),
	Nom_Rubrique VARCHAR(50),
	CONSTRAINT PK_CALCULEE_A_PARTIR_DE PRIMARY KEY (ID_DD, Nom_Calculee, Nom_Rubrique),
	CONSTRAINT FK_CALCULEE_A_PARTIR_DE___CALCULEE FOREIGN KEY (ID_DD, Nom_Calculee) REFERENCES CALCULEE(ID_DD, Nom_Calculee),
	CONSTRAINT FK_CALCULEE_A_PARTIR_DE___RUBRIQUE FOREIGN KEY (ID_DD, Nom_Rubrique) REFERENCES RUBRIQUE(ID_DD, Nom_Rubrique)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;






DROP TABLE IF EXISTS PARAMETRE;
CREATE TABLE PARAMETRE (
	ID_DD INT,
	Nom_Parametre VARCHAR(50),
	Valeur VARCHAR(500), -- car %, ou taux de réduction, ...
	CONSTRAINT PK_PARAMETRE PRIMARY KEY (ID_DD, Nom_Parametre),
	CONSTRAINT FK_PARAMETRE_RUBRIQUE FOREIGN KEY (ID_DD, Nom_Parametre) REFERENCES RUBRIQUE(ID_DD, Nom_Rubrique)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;








DROP TABLE IF EXISTS ENTITE;
CREATE TABLE ENTITE (
	ID_MEA INT,
	Nom_Entite VARCHAR(50),
	CONSTRAINT PK_ENTITE PRIMARY KEY (ID_MEA, Nom_Entite),
	CONSTRAINT FK_ENTITE_MEA FOREIGN KEY (ID_MEA) REFERENCES MEA(ID_MEA)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;







DROP TABLE IF EXISTS ASSOCIATION;
CREATE TABLE ASSOCIATION (
	ID_MEA INT,
	Nom_Association VARCHAR(50),
	CONSTRAINT PK_ASSOCIATION PRIMARY KEY (ID_MEA, Nom_Association),
	CONSTRAINT FK_ASSOCIATION_MEA FOREIGN KEY (ID_MEA) REFERENCES MEA(ID_MEA)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;







DROP TABLE IF EXISTS TYPE_CARDINALITE;
CREATE TABLE TYPE_CARDINALITE (
	Libelle_Cardinalite VARCHAR(3),
	CONSTRAINT PK_ID_TYPE_CARDINALITE PRIMARY KEY (Libelle_Cardinalite)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;






DROP TABLE IF EXISTS PATTE;
CREATE TABLE PATTE (
	ID_MEA INT,	
	Nom_Entite VARCHAR(50) NOT NULL, -- Obligatoire sinon inexistance de la patte
	Nom_Association VARCHAR(50) NOT NULL, -- idem
	Libelle_Cardinalite VARCHAR(3),
	CONSTRAINT PK_PATTE PRIMARY KEY (ID_MEA, Nom_Entite, Nom_Association),
	CONSTRAINT FK_PATTE_ENTITE FOREIGN KEY (ID_MEA, Nom_Entite) REFERENCES ENTITE(ID_MEA, Nom_Entite),
	CONSTRAINT FK_PATTE_ASSOCIATION FOREIGN KEY (ID_MEA, Nom_Association) REFERENCES ASSOCIATION(ID_MEA, Nom_Association),
	CONSTRAINT FK_PATTE___TYPE_CARDINALITE FOREIGN KEY (Libelle_Cardinalite) REFERENCES TYPE_CARDINALITE(Libelle_Cardinalite)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;







DROP TABLE IF EXISTS ATTRIBUT;
CREATE TABLE ATTRIBUT (
	ID_DD INT,
	Nom_Attribut VARCHAR(50),
	Cle_Primaire BOOLEAN DEFAULT FALSE, -- sert a déterminer quels attributs (ou paires, ou triplets) sont clés primaires d'une entité
	ID_MEA INT,
	Nom_Entite VARCHAR(50) DEFAULT NULL, -- Ou exclusif entre ENTITE et ASSOCIATION
	Nom_Association VARCHAR(50) DEFAULT NULL,  -- Ou exclusif entre ENTITE et ASSOCIATION
	ID_Type_Donnee INT DEFAULT NULL,
	CONSTRAINT PK_ATTRIBUT PRIMARY KEY (ID_DD, Nom_Attribut),
	CONSTRAINT FK_ATTRIBUT_RUBRIQUE FOREIGN KEY (ID_DD, Nom_Attribut) REFERENCES RUBRIQUE(ID_DD, Nom_Rubrique),
	CONSTRAINT FK_ATTRIBUT_ENTITE FOREIGN KEY (ID_MEA, Nom_Entite) REFERENCES ENTITE(ID_MEA, Nom_Entite),  -- Ou exclusif entre ENTITE et ASSOCIATION
	CONSTRAINT FK_ATTRIBUT_ASSOCIATION FOREIGN KEY (ID_MEA, Nom_Association) REFERENCES ASSOCIATION(ID_MEA, Nom_Association),  -- Ou exclusif entre ENTITE et ASSOCIATION
	CONSTRAINT FK_ATTRIBUT___TYPE_DONNE FOREIGN KEY (ID_Type_Donnee) REFERENCES TYPE_DONNEE(ID_Type_Donnee)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;












